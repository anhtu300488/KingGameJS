package bigkenTurn;
option java_package = "com.mi.game.network.data.bin";
option java_outer_classname = "bigkenTurn";
import "map_field_entry.proto";

//Turn 
//Message đc client gửi đi khi đánh bài hoặc bỏ lượt

//args la 1 map cac tham so truyen len dang string
//voi game tien len: 
	//key = turnCards, value = chuoi string la gia tri quan bai cach nhau boi dau phay
	//key = cardRemainingCount, value = số lượng quân bài còn lại của người vừa đánh
	//key = passUp, value : true/false (true bo luot)
	//key = newTurn, value:true/false (true: bat dau luot danh moi)
// game phỏm
	//Request
		//key = action, value(1: đánh bài, 2: bốc bài, 3: ăn bài, 4 gửi bài, 5: hạ phỏm, 6: tự động hạ, 7: ù)
		//key = data, value = dữ liệu tương ứng với từng action(chỉ có đánh bài, hạ phỏm, gửi bài mới có trường này)
	//Respones
		//key = action, value(1: đánh bài, 2: bốc bài, 3: ăn bài, 4 gửi bài, 5: hạ phỏm, 6: tự động hạ, 7: ù)
		//key = data, value = dữ liệu tương ứng với từng action (nếu action = 2(bốc bài) thì chỉ có người chơi có id = nextTurnUserId là có dữ liệu này trong message trả về, các action khác tất cả người chơi đều nhận được)
		//key = nextAction, value = các hành động có thể thực hiện tiếp (chỉ có người chơi có id = nextTurnUserId là có dữ liệu này trong message trả về)
		//key = suggestionCards, value = các quân trong cạ mà có thể ăn đc quân bài người trước đánh (xuất hiện khi action = 1 - gợi ý cạ ăn, action = 4 - gợi ý phỏm hạ, action = 5 - gợi ý quân bài gửi được)
		//key = isPivot, value = true/false lượt này có phải lượt bắt đầu chốt hay không, để thông báo cho cả bàn chơi biết (chỉ có tham số này khi action = 2)
		//key = newFirstRealeaseId, value: id của user hạ đầu tiên (xuất hiện khi action = 3 - ăn bài. Khi đó có sự thay đổi người hạ đầu. Nếu người hạ đầu trước đã hạ phỏm => được tái phỏm)
		//key = mainCount, value: số quân bài còn lại của nóc bài (action = 2 mới có tham số này)
		//key = blastType, value = 1 - ù thường, 2 - ù tròn, 3- ù khan
// game xóc đĩa
	//Request:
		//key = action, value (3: bán cửa, 5: mua cửa)
		//ket = gateValue , value = id cửa muốn bán hoặc muốn mua
	//Respones
		//key = diceValue, value(0: 4 ngửa, 1: 3 ngửa 1 sấp, 4: 4 sấp, 3: 1 ngửa 3 sấp)
		//key = action, value (2: thông tin bán cửa, 3: bán cửa, 4: thông tin mua cửa, 5: mua cửa, 6: cân cửa, 7: mở bát)
		//key = gateCanSell, value = id các cửa có thể bán (trường hợp action = 2, gửi về cho nhà cái)
		//key = gateSold, value = id cửa bán (trường hợp action = 3, gửi về cho nhà cái)
		//key = gateSolds, value = chuỗi id cửa bán (trường hợp action = 4, gửi về cho toàn room)
		//key = buyerUserId, value = id người mua
		//key = gateBought, value = id cửa đc mua
		//key = balanceRefund (thông tin tiền trả lại người đặt khi cân cửa, định dạng json {gateId:{[user1Id:money1], [user2Id:money2]}})
//game tài xỉu
	//Respones
		//key = tableStage, value (1: đặt cược, 2: cân cửa, 3: đổ xí ngầu, 4: matchEnd, 5: prepare new match)
		//key = diceValues, value (chuỗi giá trị của 3 con xúc xắc, định dạng 3,5,6)
		//key = totalValue, value (tổng giá trị của 3 xúc xắc)
		//key = betGateInfo, value (thông tin các cửa đặt, định dạng 0-số tiền-số người đặt, 1-số tiền-số người đặt, 10-số tiền-số người đặt, 11-số tiền-số người đặt (0: id cửa xỉu bên cash, 1: id cửa tài bên cash, 10: id cửa xỉu bên gold, 11: id cửa tài bên )
message BINTurnRequest {
	required int32 roomIndex = 1;
	repeated BINMapFieldEntry args = 2;
}

//
//
message BINTurnResponse {
    required bool responseCode = 1;
    optional string message = 2;
	optional int64 currentTurnUserId = 3;//id người đánh turn hiện tại
	optional int64 nextTurnUserId = 4;//id người đánh kế tiếp
	optional bool matchEnd = 5;// = true: kết thúc ván (trường hợp người đánh hiện tại hết bài)
	optional int countDownTimer = 6;//thời gian đếm ngược, phụ thuộc vào tham số matchEnd (matchEnd = true: thời gian countDown đến khi nhận được message matchEnd, matchEnd = false: countDown cho người đánh tiếp theo)
	repeated BINMapFieldEntry args = 7;//map chứa các thông tin đặc biệt cho từng game theo mô tả ở đầu file 
}

//End Turn 
